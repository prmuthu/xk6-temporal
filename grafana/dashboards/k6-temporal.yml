# dashboard.yaml
title: K6 Temporal

editable: true
tags: [generated]
time: [now-30m, now]
auto_refresh: 10s
shared_crosshair: true

variables:
  - interval:
      name: interval
      label: Interval
      values: ["30s", "1m", "5m"]
      default: 1m

rows:
  - name: K6
    panels:
      - graph:
          title: VUs
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: "k6_vus"
                legend: "VU"
      - graph:
          title: Iterations/second
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (rate(k6_iterations[$interval])) by (scenario)
                legend: "{{scenario}}"
      - graph:
          title: Dropped iterations
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (k6_dropped_iterations) by (scenario)
                legend: "{{scenario}}"
      - graph:
          title: Iteration Duration 95%ile
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (k6_iteration_duration_p95) by (scenario)
                legend: "{{scenario}}"
          axes:
            left: { unit: ms }
  - name: K6 Temporal Clients
    panels:
      - graph:
          title: Requests/second
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (rate(k6_temporal_request[$interval])) by (namespace, operation)
                legend: "{{namespace}}: {{operation}}"
            - prometheus:
                query: sum (rate(k6_temporal_long_request[$interval])) by (namespace, operation)
                legend: "{{namespace}}: {{operation}}"
      - graph:
          title: Request Latency p95
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (k6_temporal_request_latency_p95) by (namespace, operation)
                legend: "{{namespace}}: {{operation}}"
          axes:
            left: { unit: ms }
      - graph:
          title: Long Poll Request Latency p95
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (k6_temporal_long_request_latency_p95) by (namespace, operation)
                legend: "{{namespace}}: {{operation}}"
          axes:
            left: { unit: ms }
  - name: Workflows
    panels:
      - graph:
          title: Workflow Start Rate
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (rate(temporal_workflow_start[$interval])) by (namespace, workflow_type)
                legend: "{{namespace}}: {{workflow_type}}"
      - graph:
          title: Workflow Completion Rate
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (rate(temporal_workflow_completed[$interval])) by (namespace, workflow_type)
                legend: "{{namespace}}: {{workflow_type}}"
      - graph:
          title: Workflow Completion Latency p95
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: histogram_quantile(0.95, sum(rate(temporal_workflow_endtoend_latency_bucket[$interval])) by (namespace, task_queue, workflow_type, le)) * 1000
                legend: "{{namespace}}: {{task_queue}} {{workflow_type}}"
          axes:
            left: { unit: ms }
  - name: Persistence
    panels:
      - graph:
          title: Create/Update Workflows/second
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum(rate(persistence_requests{operation=~"CreateWorkflowExecution|UpdateWorkflowExecution"}[$interval])) by (operation)
                legend: "{{operation}}"
      - graph:
          title: Create Workflow Latency
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: histogram_quantile(0.90, sum(rate(persistence_latency_bucket{operation="CreateWorkflowExecution"}[$interval])) by (namespace, le)) * 1000
                legend: "90"
            - prometheus:
                query: histogram_quantile(0.95, sum(rate(persistence_latency_bucket{operation="CreateWorkflowExecution"}[$interval])) by (namespace, le)) * 1000
                legend: "95"
          axes:
            left: { unit: ms }
      - graph:
          title: Update Workflow Latency
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: histogram_quantile(0.90, sum(rate(persistence_latency_bucket{operation="UpdateWorkflowExecution"}[$interval])) by (namespace, le)) * 1000
                legend: "90"
            - prometheus:
                query: histogram_quantile(0.95, sum(rate(persistence_latency_bucket{operation="UpdateWorkflowExecution"}[$interval])) by (namespace, le)) * 1000
                legend: "95"
          axes:
            left: { unit: ms }
      - graph:
          title: Get Workflow Execution Latency
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: histogram_quantile(0.90, sum(rate(persistence_latency_bucket{operation="GetWorkflowExecution"}[$interval])) by (namespace, le)) * 1000
                legend: "90"
            - prometheus:
                query: histogram_quantile(0.95, sum(rate(persistence_latency_bucket{operation="GetWorkflowExecution"}[$interval])) by (namespace, le)) * 1000
                legend: "95"
          axes:
            left: { unit: ms }
  - name: Service
    panels:
      - graph:
          title: Progress Event Latency p95
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: histogram_quantile(0.95, sum(rate(temporal_request_latency_bucket{operation=~"RecordActivityTaskHeartbeat|RespondWorkflowTaskCompleted|RespondActivityTaskCompleted"}[$interval])) by (namespace, operation, le))
                legend: "{{namespace}}: {{operation}}"
          axes:
            left: { unit: s }
      - graph:
          title: Timer Task Latency p95
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: histogram_quantile(0.95, sum(rate(task_latency_queue_bucket{operation=~"Timer.*"}[$interval])) by (namespace, operation, le))
                legend: "{{namespace}}: {{operation}}"
          axes:
            left: { unit: s }
      - graph:
          title: Transfer Task Latency p95
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: histogram_quantile(0.95, sum(rate(task_latency_queue_bucket{operation=~"Transfer.*"}[$interval])) by (namespace, operation, le))
                legend: "{{namespace}}: {{operation}}"
          axes:
            left: { unit: s }
      - graph:
          title: External Event Latency p95
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: histogram_quantile(0.95, sum(rate(temporal_request_latency_bucket{operation=~"StartWorkflowExecution|SignalWithStartWorkflowExecution|RequestCancelWorkflowExecution|SignalWorkflowExecution|TerminateWorkflowExecution"}[$interval])) by (namespace, operation, le))
                legend: "{{namespace}}: {{operation}}"
          axes:
            left: { unit: s }
  - name: Locks
    panels:
      - graph:
          title: Workflow History Lock
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: histogram_quantile(0.99, sum(rate(cache_latency_bucket{operation="HistoryCacheGetOrCreate"}[$interval])) by (operation, le))
                legend: "{{operation}}"
          axes:
            left: { unit: s }
      - graph:
          title: Shard Lock
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: histogram_quantile(0.99, sum(rate(lock_latency_bucket{operation="ShardInfo"}[$interval])) by (operation, le))
                legend: "{{operation}}"
          axes:
            left: { unit: s }
  - name: Workers
    panels:
      - graph:
          title: Workflow Task Execution count
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (rate(temporal_workflow_task_execution_latency_count[$interval])) by (namespace, workflow_type)
                legend: "{{namespace}}: {{workflow_type}}"
      - graph:
          title: Workflow Task Schedule to Start Latency
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: rate(temporal_workflow_task_schedule_to_start_latency_sum[$interval])
                legend: "{{workflow_type}}"
          axes:
            left: { unit: ms }
      - graph:
          title: Activity Execution count
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (rate(temporal_activity_execution_latency_count[$interval])) by (namespace, activity_type)
                legend: "{{namespace}}: {{activity_type}}"
      - graph:
          title: Activity Task Schedule to Start Latency
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (rate(temporal_activity_schedule_to_start_latency_sum[$interval])) by (activity_type)
                legend: "{{activity_type}}"
          axes:
            left: { unit: ms }
      - graph:
          title: Workflow Task Poll
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (rate(temporal_workflow_task_queue_poll_succeed{namespace!="temporal_system"}[$interval])) by (namespace, task_queue)
                legend: "{{namespace}}: {{task_queue}} Succeed"
            - prometheus:
                query: sum (rate(temporal_workflow_task_queue_poll_empty{namespace!="temporal_system"}[$interval])) by (namespace, task_queue)
                legend: "{{namespace}}: {{task_queue}} Empty"
      - graph:
          title: Activity Task Poll
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (rate(temporal_activity_poll_no_task{namespace!="temporal_system"}[$interval])) by (namespace, task_queue)
                legend: "{{namespace}}: {{task_queue}} Emtpy"
      - graph:
          title: Workflow Task Slots Available
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (temporal_worker_task_slots_available{namespace!="temporal_system",worker_type="WorkflowWorker"}) by (namespace, task_queue)
                legend: "{{namespace}}: {{task_queue}}"
      - graph:
          title: Activity Task Slots Available
          datasource: temporal_prometheus
          targets:
            - prometheus:
                query: sum (temporal_worker_task_slots_available{namespace!="temporal_system",worker_type="ActivityWorker"})  by (namespace, task_queue)
                legend: "{{namespace}}: {{task_queue}}"